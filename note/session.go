// Copyright 2019 Blues Inc.  All rights reserved.
// Use of this source code is governed by licenses granted by the
// copyright holder including that found in the LICENSE file.

package note

// DeviceSession is the basic unit of recorded device usage history
type DeviceSession struct {
	// Session ID that can be mapped to the events created during that session
	SessionUID string `json:"session,omitempty"`
	// Info from the device structure
	DeviceUID  string `json:"device,omitempty"`
	DeviceSN   string `json:"sn,omitempty"`
	ProductUID string `json:"product,omitempty"`
	FleetUID   string `json:"fleet,omitempty"`
	// IP address of the session
	Addr string `json:"addr,omitempty"`
	// Cell ID where the session originated and quality ("mcc,mnc,lac,cellid")
	CellID string `json:"cell,omitempty"`
	// Parameters passed by device as a result of scanning towers/APs
	ScanResults *[]byte `json:"scan,omitempty"`
	// Signal strength/quality of the cell
	Rssi int    `json:"rssi,omitempty"`
	Sinr int    `json:"sinr,omitempty"`
	Rsrp int    `json:"rsrp,omitempty"`
	Rsrq int    `json:"rsrq,omitempty"`
	Rat  string `json:"rat,omitempty"`
	// Last known tower location at beginning of session
	Tower TowerLocation `json:"tower,omitempty"`
	// Last known GPS location extracted from data flowing through session
	WhereWhen     int64   `json:"where_when,omitempty"`
	WhereOLC      string  `json:"where,omitempty"`
	WhereLat      float64 `json:"where_lat,omitempty"`
	WhereLon      float64 `json:"where_lon,omitempty"`
	WhereLocation string  `json:"where_location,omitempty"`
	WhereCountry  string  `json:"where_country,omitempty"`
	WhereTimeZone string  `json:"where_timezone,omitempty"`
	// Log key for this session
	SessionLogKey string `json:"session_log_key,omitempty"`
	// Total device usage at the beginning of the period
	This DeviceUsage `json:"this,omitempty"`
	// Total device usage at the beginning of the next period, whenever it happens to occur
	Next DeviceUsage `json:"next,omitempty"`
	// Usage during the period - initially estimated, but then corrected when we get to the next period
	Period DeviceUsage `json:"period,omitempty"`
	// Physical device info
	Voltage float64 `json:"voltage,omitempty"`
	Temp    float64 `json:"temp,omitempty"`
	// Type of session
	ContinuousSession bool `json:"continuous,omitempty"`
	TLSSession        bool `json:"tls,omitempty"`
	// For keeping track of when the last work was done for a session
	LastWorkDone int64
}

// TowerLocation is the cell tower location structure generated by the tower utility
type TowerLocation struct {
	Name        string  `json:"n,omitempty"`    // name of the location
	CountryCode string  `json:"c,omitempty"`    // country code
	TimeZoneID  int     `json:"z,omitempty"`    // timezone id (see tz.go)
	OLC         string  `json:"l,omitempty"`    // location
	Lat         float64 `json:"lat,omitempty"`  // latitude
	Lon         float64 `json:"lon,omitempty"`  // longitude
	TimeZone    string  `json:"zone,omitempty"` // timezone name
	MCC         int     `json:"mcc,omitempty"`
	MNC         int     `json:"mnc,omitempty"`
	LAC         int     `json:"lac,omitempty"`
	CID         int     `json:"cid,omitempty"`
	Towers      int     `json:"tri,omitempty"` // triangulation points
}
