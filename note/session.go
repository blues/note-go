// Copyright 2019 Blues Inc.  All rights reserved.
// Use of this source code is governed by licenses granted by the
// copyright holder including that found in the LICENSE file.

package note

// DeviceSession is the basic unit of recorded device usage history
type DeviceSession struct {
	// Info from the device structure
    DeviceUID string                    `json:"device,omitempty"`
    DeviceSN string						`json:"sn,omitempty"`
    ProductUID string					`json:"product,omitempty"`
    FleetUID string						`json:"fleet,omitempty"`
	// IP address of the session
	Addr string							`json:"addr,omitempty"`
	// Cell ID where the session originated ("mcc,mnc,lac,cellid" all in base 10)
	CellID string						`json:"cell,omitempty"`
	// Last known tower location where device pinged
	Where TowerLocation					`json:"tower,omitempty"`
	// Total device usage at the beginning of the period
	This DeviceUsage					`json:"this,omitempty"`
	// Total device usage at the beginning of the next period, whenever it happens to occur
	Next DeviceUsage					`json:"next,omitempty"`
	// Usage during the period - initially estimated, but then corrected when we get to the next period
	Period DeviceUsage					`json:"period,omitempty"`
}

// HubSessionContext are the fields that are coordinated between the client and
// the server for the duration of an open session.  The "Active" flag is true
// if the client believes that the service is actively maintaining it in parallel,
// and vice-versa on the service side.
type HubSessionContext struct {
	Active bool
	Secure bool
	Discovery bool
    DeviceUID string
    DeviceSN string
	ProductUID string
    DeviceEndpointID string
    HubEndpointID string
    HubSessionTicket string
	SessionLog DeviceSession
	Transactions int
}

// TowerLocation is the cell tower location structure generated by the tower utility
type TowerLocation struct {
    Name            string      `json:"n,omitempty"`		// name of the location
    CountryCode     string      `json:"c,omitempty"`		// country code
    TimeZoneID      int			`json:"z,omitempty"`		// timezone id (see tz.go)
    OLC				string		`json:"l,omitempty"`		// location
	Lat				float64		`json:"lat,omitempty"`		// latitude
	Lon				float64		`json:"lon,omitempty"`		// longitude
    TimeZone	    string		`json:"zone,omitempty"`		// timezone name
}
